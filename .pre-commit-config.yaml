# Pre-commit hooks configuration for automated code quality checks
# See https://pre-commit.com for more information

repos:
  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: ^tests/fixtures/
      - id: end-of-file-fixer
        exclude: ^tests/fixtures/
      - id: check-yaml
        exclude: ^tests/fixtures/
      - id: check-json
        exclude: ^tests/fixtures/
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: debug-statements
      - id: fix-byte-order-marker
      - id: mixed-line-ending
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88, --target-version=py39]
        exclude: ^tests/fixtures/

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]
        exclude: ^tests/fixtures/

  # Python linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
        exclude: ^tests/fixtures/

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports, --no-strict-optional]
        exclude: ^tests/fixtures/|^tests/mocks/

  # Security linting with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        args: [-r, ., -ll, --skip=B101,B601]
        exclude: ^tests/

  # Upgrade Python syntax with pyupgrade
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py39-plus]
        exclude: ^tests/fixtures/

  # Remove unused imports with autoflake
  - repo: https://github.com/pycqa/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args:
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --ignore-init-module-imports
        exclude: ^tests/fixtures/

  # Check for common Python mistakes
  - repo: https://github.com/asottile/yesqa
    rev: v1.5.0
    hooks:
      - id: yesqa

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        files: Dockerfile

  # YAML formatting
  - repo: https://github.com/macisamuele/language-formatters-pre-commit-hooks
    rev: v2.12.0
    hooks:
      - id: pretty-format-yaml
        args: [--autofix, --indent=2]
        exclude: ^tests/fixtures/

  # Check requirements.txt
  - repo: https://github.com/jazzband/pip-tools
    rev: 7.3.0
    hooks:
      - id: pip-compile
        files: requirements\.in$
        args: [--output-file=requirements.txt]

  # Local hooks for trading bot specific checks
  - repo: local
    hooks:
      # Run tests before commit
      - id: pytest-fast
        name: Run fast tests
        entry: pytest
        language: system
        args: [-v, --tb=short, -m, "not slow and not network", tests/unit/]
        pass_filenames: false
        always_run: false
        stages: [pre-commit]

      # Check for sensitive data
      - id: check-secrets
        name: Check for secrets and sensitive data
        entry: python scripts/check_secrets.py
        language: system
        files: \.(py|yaml|yml|json|env)$
        exclude: ^tests/fixtures/

      # Validate configuration files
      - id: validate-config
        name: Validate configuration files
        entry: python -c "
import yaml, json, sys
for file in sys.argv[1:]:
    try:
        if file.endswith('.yaml') or file.endswith('.yml'):
            with open(file) as f: yaml.safe_load(f)
        elif file.endswith('.json'):
            with open(file) as f: json.load(f)
        print(f'✓ {file}')
    except Exception as e:
        print(f'✗ {file}: {e}')
        sys.exit(1)
        "
        language: system
        files: \.(yaml|yml|json)$
        exclude: ^tests/fixtures/

      # Check for TODO/FIXME comments in production code
      - id: check-todos
        name: Check for TODO/FIXME in production code
        entry: python -c "
import sys, re
for file in sys.argv[1:]:
    with open(file, 'r', encoding='utf-8', errors='ignore') as f:
        for i, line in enumerate(f, 1):
            if re.search(r'(TODO|FIXME|XXX|HACK)', line, re.I):
                print(f'{file}:{i}: {line.strip()}')
        "
        language: system
        files: ^(trading_bot|strategies|services|config|risk_management)/.*\.py$
        exclude: _test\.py$

      # Validate Python imports
      - id: check-imports
        name: Check Python imports
        entry: python -c "
import ast, sys
for file in sys.argv[1:]:
    try:
        with open(file, 'r') as f:
            ast.parse(f.read())
        print(f'✓ {file}')
    except SyntaxError as e:
        print(f'✗ {file}: {e}')
        sys.exit(1)
        "
        language: system
        files: \.py$
        exclude: ^tests/fixtures/

      # Check for large files
      - id: check-large-files
        name: Check for large files
        entry: python -c "
import os, sys
max_size = 1024 * 1024  # 1MB
for file in sys.argv[1:]:
    if os.path.getsize(file) > max_size:
        print(f'File {file} is larger than 1MB')
        sys.exit(1)
        "
        language: system
        exclude: ^tests/fixtures/|\.db$|\.png$|\.jpg$|\.pdf$

  # Additional Python quality checks
  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        exclude: ^tests/fixtures/

  # Check for merge conflicts
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-merge-conflict

# Configuration for pre-commit itself
default_stages: [pre-commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0

# Global excludes
exclude: |
  (?x)^(
    .*\.egg-info/.*|
    \.venv/.*|
    venv/.*|
    env/.*|
    __pycache__/.*|
    \.pytest_cache/.*|
    \.git/.*|
    \.tox/.*|
    build/.*|
    dist/.*|
    node_modules/.*|
    \.mypy_cache/.*|
    tests/fixtures/data/.*\.csv|
    tests/fixtures/data/.*\.json|
    .*\.db$|
    .*\.db-.*|
    .*\.log$
  )$