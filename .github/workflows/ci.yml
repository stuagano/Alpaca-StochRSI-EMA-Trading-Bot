name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster builds
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Verify installation
      run: |
        python --version
        pip list
        python -c "import pandas, numpy, pytest; print('Core dependencies OK')"

    - name: Create test directories
      run: |
        mkdir -p tests/reports
        mkdir -p tests/fixtures/data
        mkdir -p AUTH
        echo "AAPL TSLA GOOGL MSFT AMZN" > AUTH/Tickers.txt

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      continue-on-error: true
      run: |
        mypy --install-types --non-interactive || true
        mypy . --ignore-missing-imports --no-strict-optional || true

    - name: Security check with bandit
      continue-on-error: true
      run: |
        bandit -r . -f json -o tests/reports/bandit-report.json || true
        bandit -r . -ll || true

    - name: Safety check for dependencies
      continue-on-error: true
      run: |
        safety check --json --output tests/reports/safety-report.json || true
        safety check || true

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v \
          --cov=. \
          --cov-report=xml:tests/reports/coverage-unit.xml \
          --cov-report=html:tests/reports/htmlcov-unit \
          --junit-xml=tests/reports/junit-unit.xml \
          --tb=short \
          -m "not slow and not network"

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v \
          --cov=. \
          --cov-append \
          --cov-report=xml:tests/reports/coverage-integration.xml \
          --cov-report=html:tests/reports/htmlcov-integration \
          --junit-xml=tests/reports/junit-integration.xml \
          --tb=short \
          -m "not slow and not network"

    - name: Run performance tests
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      continue-on-error: true
      run: |
        pytest tests/ -v \
          --benchmark-only \
          --benchmark-json=tests/reports/benchmark-results.json \
          -m "performance"

    - name: Generate test fixtures
      run: |
        python -c "
        from tests.fixtures.market_data_fixtures import FixtureManager
        from tests.fixtures.order_fixtures import create_csv_fixtures
        
        # Create market data fixtures
        manager = FixtureManager()
        manager.create_all_standard_fixtures()
        
        # Create order fixtures
        create_csv_fixtures()
        
        print('Test fixtures created successfully')
        "

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        files: tests/reports/coverage-unit.xml,tests/reports/coverage-integration.xml
        fail_ci_if_error: false
        verbose: true

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          tests/reports/
          !tests/reports/htmlcov*
        retention-days: 30

    - name: Upload coverage artifacts
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: tests/reports/htmlcov*/
        retention-days: 30

  smoke-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run smoke tests
      run: |
        pytest tests/ -v -m "smoke" \
          --tb=short \
          --maxfail=1

    - name: Test bot initialization
      run: |
        python -c "
        import sys
        sys.path.append('.')
        
        # Test basic imports
        from trading_bot import TradingBot
        from strategies.stoch_rsi_strategy import StochRSIStrategy
        from config.unified_config import get_config
        
        print('✓ All imports successful')
        print('✓ Smoke tests passed')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety semgrep

    - name: Run Bandit security scan
      continue-on-error: true
      run: |
        bandit -r . -f json -o security-report.json
        bandit -r . -ll

    - name: Run Safety vulnerability scan
      continue-on-error: true
      run: |
        safety check --json --output safety-report.json
        safety check

    - name: Run Semgrep scan
      continue-on-error: true
      run: |
        semgrep --config=auto . --json --output=semgrep-report.json
        semgrep --config=auto .

    - name: Upload security artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          security-report.json
          safety-report.json
          semgrep-report.json
        retention-days: 30

  build-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme myst-parser

    - name: Generate API documentation
      continue-on-error: true
      run: |
        sphinx-apidoc -o docs/api . --force
        sphinx-build -b html docs docs/_build/html

    - name: Upload documentation
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
        retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: [test, smoke-tests, security-scan]
    if: always() && github.event_name == 'push'
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.smoke-tests.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        echo "📊 Test results available in artifacts"

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.smoke-tests.result == 'failure'
      run: |
        echo "❌ Tests failed!"
        echo "📋 Check the test artifacts for details"
        exit 1

  # Weekly dependency update check
  dependency-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Check for outdated dependencies
      run: |
        pip install pip-audit pip-check
        pip-audit --desc
        pip list --outdated

    - name: Generate dependency report
      run: |
        pip freeze > current-requirements.txt
        pip-audit --format=json --output=dependency-audit.json

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: |
          current-requirements.txt
          dependency-audit.json
        retention-days: 7