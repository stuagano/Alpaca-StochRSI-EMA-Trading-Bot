version: '3.8'

services:
  # API Gateway - Central entry point
  api-gateway:
    build: ./services/api-gateway
    ports:
      - "6000:6000"
    environment:
      - POSITION_SERVICE_URL=http://position-management:6001
      - TRADING_SERVICE_URL=http://trading-execution:6002
      - SIGNAL_SERVICE_URL=http://signal-processing:6003
      - RISK_SERVICE_URL=http://risk-management:6004
      - MARKET_DATA_SERVICE_URL=http://market-data:6005
    depends_on:
      - position-management
      - trading-execution
      - signal-processing
      - risk-management
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # Position Management Service
  position-management:
    build: ./services/position-management
    ports:
      - "6001:6001"
    environment:
      - DATABASE_URL=sqlite+aiosqlite:///./data/position_management.db
      - PORT=6001
    volumes:
      - ./data/position-management:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # Trading Execution Service
  trading-execution:
    build: ./services/trading-execution
    ports:
      - "6002:6002"
    environment:
      - DATABASE_URL=sqlite+aiosqlite:///./data/trading_execution.db
      - POSITION_SERVICE_URL=http://position-management:6001
      - PORT=6002
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
    volumes:
      - ./data/trading-execution:/app/data
    depends_on:
      - position-management
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # Signal Processing Service
  signal-processing:
    build: ./services/signal-processing
    ports:
      - "6003:6003"
    environment:
      - DATABASE_URL=sqlite+aiosqlite:///./data/signal_processing.db
      - PORT=6003
    volumes:
      - ./data/signal-processing:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # Risk Management Service
  risk-management:
    build: ./services/risk-management
    ports:
      - "6004:6004"
    environment:
      - DATABASE_URL=sqlite+aiosqlite:///./data/risk_management.db
      - POSITION_SERVICE_URL=http://position-management:6001
      - PORT=6004
    volumes:
      - ./data/risk-management:/app/data
    depends_on:
      - position-management
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # Market Data Service (placeholder)
  market-data:
    image: nginx:alpine
    ports:
      - "6005:80"
    command: /bin/sh -c "echo '{\"service\":\"market-data\",\"status\":\"healthy\",\"message\":\"Placeholder service\"}' > /usr/share/nginx/html/health && nginx -g 'daemon off;'"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - trading-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - trading-network
    profiles:
      - monitoring

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16